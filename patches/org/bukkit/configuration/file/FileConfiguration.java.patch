--- ../src-base/minecraft/org/bukkit/configuration/file/FileConfiguration.java
+++ ../src-work/minecraft/org/bukkit/configuration/file/FileConfiguration.java
@@ -2,10 +2,6 @@
 
 import com.google.common.base.Charsets;
 import com.google.common.io.Files;
-
-import org.apache.commons.lang.Validate;
-import org.bukkit.configuration.InvalidConfigurationException;
-
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
@@ -18,10 +14,10 @@
 import java.io.Reader;
 import java.io.Writer;
 import java.nio.charset.Charset;
-
+import org.apache.commons.lang.Validate;
 import org.bukkit.configuration.Configuration;
+import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.MemoryConfiguration;
-import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
 
 /**
  * This is a base class for all File based implementations of {@link
@@ -36,7 +32,7 @@
      * @deprecated temporary compatibility measure
      */
     @Deprecated
-    public static final boolean UTF8_OVERRIDE;
+    public static final boolean UTF8_OVERRIDE=true;
     /**
      * This value specifies if the system default encoding is unicode, but
      * cannot parse standard ASCII.
@@ -44,24 +40,14 @@
      * @deprecated temporary compatibility measure
      */
     @Deprecated
-    public static final boolean UTF_BIG;
+    public static final boolean UTF_BIG=false;
     /**
      * This value specifies if the system supports unicode.
      *
      * @deprecated temporary compatibility measure
      */
     @Deprecated
-    public static final boolean SYSTEM_UTF;
-    static {
-        final byte[] testBytes = Base64Coder.decode("ICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX4NCg==");
-        final String testString = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\r\n";
-        final Charset defaultCharset = Charset.defaultCharset();
-        final String resultString = new String(testBytes, defaultCharset);
-        final boolean trueUTF = defaultCharset.name().contains("UTF");
-        UTF8_OVERRIDE = !testString.equals(resultString) || defaultCharset.equals(Charset.forName("US-ASCII"));
-        SYSTEM_UTF = trueUTF || UTF8_OVERRIDE;
-        UTF_BIG = trueUTF && UTF8_OVERRIDE;
-    }
+    public static final boolean SYSTEM_UTF=true;
 
     /**
      * Creates an empty {@link FileConfiguration} with no default values.
@@ -102,7 +88,7 @@
 
         String data = saveToString();
 
-        Writer writer = new OutputStreamWriter(new FileOutputStream(file), UTF8_OVERRIDE && !UTF_BIG ? Charsets.UTF_8 : Charset.defaultCharset());
+        Writer writer = new OutputStreamWriter(new FileOutputStream(file), Charsets.UTF_8);
 
         try {
             writer.write(data);
@@ -166,7 +152,7 @@
 
         final FileInputStream stream = new FileInputStream(file);
 
-        load(new InputStreamReader(stream, UTF8_OVERRIDE && !UTF_BIG ? Charsets.UTF_8 : Charset.defaultCharset()));
+        load(new InputStreamReader(stream, Charsets.UTF_8));
     }
 
     /**
@@ -191,7 +177,7 @@
     public void load(InputStream stream) throws IOException, InvalidConfigurationException {
         Validate.notNull(stream, "Stream cannot be null");
 
-        load(new InputStreamReader(stream, UTF8_OVERRIDE ? Charsets.UTF_8 : Charset.defaultCharset()));
+        load(new InputStreamReader(stream, Charsets.UTF_8));
     }
 
     /**
