--- ../src-base/minecraft/net/minecraft/network/NetworkManager.java
+++ ../src-work/minecraft/net/minecraft/network/NetworkManager.java
@@ -76,13 +76,23 @@
     private final EnumPacketDirection direction;
     private final Queue<NetworkManager.InboundHandlerTuplePacketListener> outboundPacketsQueue = Queues.<NetworkManager.InboundHandlerTuplePacketListener>newConcurrentLinkedQueue();
     private final ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();
-    private Channel channel;
-    private SocketAddress socketAddress;
+    public Channel channel;
+    // Spigot Start // PAIL
+    public SocketAddress socketAddress;
+    public java.util.UUID spoofedUUID;
+    public com.mojang.authlib.properties.Property[] spoofedProfile;
+    public boolean preparing = true;
+    // Spigot End
     private INetHandler packetListener;
     private ITextComponent terminationReason;
     private boolean isEncrypted;
     private boolean disconnected;
 
+    // Paper start - NetworkClient implementation
+    public int protocolVersion;
+    public java.net.InetSocketAddress virtualHost;
+    // Paper end
+
     public NetworkManager(EnumPacketDirection packetDirection)
     {
         this.direction = packetDirection;
@@ -98,6 +108,7 @@
         super.channelActive(p_channelActive_1_);
         this.channel = p_channelActive_1_.channel();
         this.socketAddress = this.channel.remoteAddress();
+        this.preparing = false; // Spigot
 
         try
         {
@@ -298,9 +309,12 @@
 
     public void closeChannel(ITextComponent message)
     {
+        this.preparing = false; // Spigot
         if (this.channel.isOpen())
         {
-            this.channel.close().awaitUninterruptibly();
+            // We can't wait as this may be called from an event loop.
+            // this.channel.close().awaitUninterruptibly();
+            this.channel.close();
             this.terminationReason = message;
         }
     }
@@ -410,7 +424,7 @@
             }
             else
             {
-                this.channel.pipeline().addBefore("decoder", "decompress", new NettyCompressionDecoder(threshold));
+                this.channel.pipeline().addAfter("splitter", "decompress", new NettyCompressionDecoder(threshold));
             }
 
             if (this.channel.pipeline().get("compress") instanceof NettyCompressionEncoder)
@@ -440,12 +454,8 @@
     {
         if (this.channel != null && !this.channel.isOpen())
         {
-            if (this.disconnected)
+            if (!this.disconnected)
             {
-                LOGGER.warn("handleDisconnection() called twice");
-            }
-            else
-            {
                 this.disconnected = true;
 
                 if (this.getExitMessage() != null)
@@ -476,4 +486,12 @@
                 this.futureListeners = inFutureListeners;
             }
         }
+
+    // Spigot Start
+    public SocketAddress getRawAddress()
+    {
+        return this.channel.remoteAddress();
+    }
+    // Spigot End
+
 }
