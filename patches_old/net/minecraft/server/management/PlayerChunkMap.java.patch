--- ../src-base/minecraft/net/minecraft/server/management/PlayerChunkMap.java
+++ ../src-work/minecraft/net/minecraft/server/management/PlayerChunkMap.java
@@ -7,12 +7,17 @@
 import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
 import javax.annotation.Nullable;
+import javax.annotation.concurrent.ThreadSafe;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
@@ -21,6 +26,11 @@
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
 
+/**
+ * Akarin Changes Note
+ * 1) Make whole class thread-safe (safety issue)
+ */
+@ThreadSafe // Akarin - idk why we need do so!!
 public class PlayerChunkMap
 {
     private static final Predicate<EntityPlayerMP> NOT_SPECTATOR = new Predicate<EntityPlayerMP>()
@@ -39,12 +49,14 @@
     };
     private final WorldServer world;
     private final List<EntityPlayerMP> players = Lists.<EntityPlayerMP>newArrayList();
+    private final ReentrantReadWriteLock playersLock = new ReentrantReadWriteLock(); // Akarin - add lock
     private final Long2ObjectMap<PlayerChunkMapEntry> entryMap = new Long2ObjectOpenHashMap<PlayerChunkMapEntry>(4096);
     private final Set<PlayerChunkMapEntry> dirtyEntries = Sets.<PlayerChunkMapEntry>newHashSet();
     private final List<PlayerChunkMapEntry> pendingSendToPlayers = Lists.<PlayerChunkMapEntry>newLinkedList();
     private final List<PlayerChunkMapEntry> entriesWithoutChunks = Lists.<PlayerChunkMapEntry>newLinkedList();
     private final List<PlayerChunkMapEntry> entries = Lists.<PlayerChunkMapEntry>newArrayList();
     private int playerViewRadius;
+    public int getViewDistance() { return playerViewRadius; } // Paper OBFHELPER
     private long previousTotalWorldTime;
     private boolean sortMissingChunks = true;
     private boolean sortSendToPlayers = true;
@@ -52,7 +64,7 @@
     public PlayerChunkMap(WorldServer serverWorld)
     {
         this.world = serverWorld;
-        this.setPlayerViewRadius(serverWorld.getMinecraftServer().getPlayerList().getViewDistance());
+        this.setPlayerViewRadius(serverWorld.spigotConfig.viewDistance); // Spigot
     }
 
     public WorldServer getWorldServer()
@@ -103,7 +115,7 @@
         };
     }
 
-    public void tick()
+    public synchronized void tick() // Akarin - synchronized
     {
         long i = this.world.getTotalWorldTime();
 
@@ -183,6 +195,9 @@
                             break;
                         }
                     }
+                } else {
+                    // CraftBukkit - SPIGOT-2891: remove once chunk has been provided
+                    iterator.remove();
                 }
             }
         }
@@ -209,25 +224,27 @@
             }
         }
 
+        playersLock.readLock().lock(); // Akarin
         if (this.players.isEmpty())
         {
             WorldProvider worldprovider = this.world.provider;
 
-            if (!worldprovider.canRespawnHere())
+            if (!worldprovider.canRespawnHere() && !this.world.disableLevelSaving) // Paper - respect saving disabled setting
             {
                 this.world.getChunkProvider().queueUnloadAll();
             }
         }
+        playersLock.readLock().unlock(); // Akarin
     }
 
-    public boolean contains(int chunkX, int chunkZ)
+    public synchronized boolean contains(int chunkX, int chunkZ) // Akarin - synchronized
     {
         long i = getIndex(chunkX, chunkZ);
         return this.entryMap.get(i) != null;
     }
 
     @Nullable
-    public PlayerChunkMapEntry getEntry(int x, int z)
+    public synchronized PlayerChunkMapEntry getEntry(int x, int z) // Akarin - synchronized
     {
         return (PlayerChunkMapEntry)this.entryMap.get(getIndex(x, z));
     }
@@ -257,6 +274,16 @@
         return playerchunkmapentry;
     }
 
+    // CraftBukkit start - add method
+    public final boolean isChunkInUse(int x, int z) {
+        PlayerChunkMapEntry pi = getEntry(x, z);
+        if (pi != null) {
+            return (pi.players.size() > 0);
+        }
+        return false;
+    }
+    // CraftBukkit end
+
     public void markBlockForUpdate(BlockPos pos)
     {
         int i = pos.getX() >> 4;
@@ -276,15 +303,31 @@
         player.managedPosX = player.posX;
         player.managedPosZ = player.posZ;
 
-        for (int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k)
+        // CraftBukkit start - Load nearby chunks first
+        List<ChunkPos> chunkList = new LinkedList<>();
+
+        // Paper start - Player view distance API
+        int viewDistance = player.getViewDistance();
+        for (int k = i - viewDistance; k <= i + viewDistance; ++k)
         {
-            for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l)
+            for (int l = j - viewDistance; l <= j + viewDistance; ++l)
             {
-                this.getOrCreateEntry(k, l).addPlayer(player);
+                // Paper end
+                chunkList.add(new ChunkPos(k, l));
             }
         }
 
+        Collections.sort(chunkList, new ChunkCoordComparator(player));
+        synchronized (this) { // Akarin - synchronized
+            for (ChunkPos pair : chunkList) {
+                this.getOrCreateEntry(pair.x, pair.z).addPlayer(player);
+            }
+        } // Akarin
+        // CraftBukkit end
+
+        playersLock.writeLock().lock(); // Akarin
         this.players.add(player);
+        playersLock.writeLock().unlock(); // Akarin
         this.markSortPending();
     }
 
@@ -293,10 +336,13 @@
         int i = (int)player.managedPosX >> 4;
         int j = (int)player.managedPosZ >> 4;
 
-        for (int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k)
+        // Paper start - Player view distance API
+        int viewDistance = player.getViewDistance();
+        for (int k = i - viewDistance; k <= i + viewDistance; ++k)
         {
-            for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l)
+            for (int l = j - viewDistance; l <= j + viewDistance; ++l)
             {
+                // Paper end
                 PlayerChunkMapEntry playerchunkmapentry = this.getEntry(k, l);
 
                 if (playerchunkmapentry != null)
@@ -306,7 +352,9 @@
             }
         }
 
+        playersLock.writeLock().lock(); // Akarin
         this.players.remove(player);
+        playersLock.writeLock().unlock(); // Akarin
         this.markSortPending();
     }
 
@@ -337,19 +385,23 @@
         {
             int k = (int)player.managedPosX >> 4;
             int l = (int)player.managedPosZ >> 4;
-            int i1 = this.playerViewRadius;
+            final int viewDistance = player.getViewDistance(); // Paper - Player view distance API
+            int i1 = Math.max(getViewDistance(), viewDistance); // Paper - Player view distance API
             int j1 = i - k;
             int k1 = j - l;
 
+            List<ChunkPos> chunksToLoad = new LinkedList<>();
+
             if (j1 != 0 || k1 != 0)
             {
                 for (int l1 = i - i1; l1 <= i + i1; ++l1)
                 {
                     for (int i2 = j - i1; i2 <= j + i1; ++i2)
                     {
-                        if (!this.overlaps(l1, i2, k, l, i1))
+                        if (!this.overlaps(l1, i2, k, l, viewDistance)) // Paper - Player view distance API
                         {
-                            this.getOrCreateEntry(l1, i2).addPlayer(player);
+                            // this.getOrCreateEntry(l1, i2).addPlayer(player);
+                            chunksToLoad.add(new ChunkPos(l1, i2)); // CraftBukkit
                         }
 
                         if (!this.overlaps(l1 - j1, i2 - k1, i, j, i1))
@@ -367,6 +419,14 @@
                 player.managedPosX = player.posX;
                 player.managedPosZ = player.posZ;
                 this.markSortPending();
+                // CraftBukkit start - send nearest chunks first
+                Collections.sort(chunksToLoad, new ChunkCoordComparator(player));
+                synchronized (this) { // Akarin - synchronized
+                    for (ChunkPos pair : chunksToLoad) {
+                        this.getOrCreateEntry(pair.x, pair.z).addPlayer(player);
+                    }
+                } // Akarin
+                // CraftBukkit end
             }
         }
     }
@@ -377,6 +437,8 @@
         return playerchunkmapentry != null && playerchunkmapentry.containsPlayer(player) && playerchunkmapentry.isSentToPlayers();
     }
 
+    public final void setViewDistanceForAll(int viewDistance) { this.setPlayerViewRadius(viewDistance); } // Paper - OBFHELPER
+    // Paper start - Separate into two methods
     public void setPlayerViewRadius(int radius)
     {
         radius = MathHelper.clamp(radius, 3, 32);
@@ -385,45 +447,63 @@
         {
             int i = radius - this.playerViewRadius;
 
-            for (EntityPlayerMP entityplayermp : Lists.newArrayList(this.players))
-            {
-                int j = (int)entityplayermp.posX >> 4;
-                int k = (int)entityplayermp.posZ >> 4;
+            playersLock.readLock().lock(); // Akarin
+            ArrayList arraylist = Lists.newArrayList(this.players);
+            playersLock.readLock().unlock(); // Akarin
 
-                if (i > 0)
-                {
-                    for (int j1 = j - radius; j1 <= j + radius; ++j1)
-                    {
-                        for (int k1 = k - radius; k1 <= k + radius; ++k1)
-                        {
-                            PlayerChunkMapEntry playerchunkmapentry = this.getOrCreateEntry(j1, k1);
+            for (Object o : arraylist) {
+                EntityPlayerMP entityplayermp = (EntityPlayerMP) o;
+                this.setViewDistance(entityplayermp, i, false); // Paper - Split, don't mark sort pending, we'll handle it after
+            }
 
-                            if (!playerchunkmapentry.containsPlayer(entityplayermp))
-                            {
-                                playerchunkmapentry.addPlayer(entityplayermp);
+            this.playerViewRadius = radius;
+            this.markSortPending();
+        }
+    }
+
+    public void setViewDistance(EntityPlayerMP entityplayer, int i) {
+        this.setViewDistance(entityplayer, i, true); // Mark sort pending by default so we don't have to remember to do so all the time
+    }
+
+    // Copied from above with minor changes
+    public void setViewDistance(EntityPlayerMP entityplayer, int i, boolean markSort) {
+        i = MathHelper.clamp(i, 3, 32);
+        int oldViewDistance = entityplayer.getViewDistance();
+        if (i != oldViewDistance) {
+            int j = i - oldViewDistance;
+
+            int k = (int)entityplayer.posX >> 4;
+            int l = (int)entityplayer.posZ >> 4;
+            int i1;
+            int j1;
+            if (j > 0) {
+                synchronized (this) { // Akarin - synchronized
+                    for (i1 = k - i; i1 <= k + i; ++i1) {
+                        for (j1 = l - i; j1 <= l + i; ++j1) {
+                            PlayerChunkMapEntry playerchunk = this.getOrCreateEntry(i1, j1);
+                            if (!playerchunk.containsPlayer(entityplayer)) {
+                                playerchunk.addPlayer(entityplayer);
                             }
                         }
                     }
-                }
-                else
-                {
-                    for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l)
-                    {
-                        for (int i1 = k - this.playerViewRadius; i1 <= k + this.playerViewRadius; ++i1)
-                        {
-                            if (!this.overlaps(l, i1, j, k, radius))
-                            {
-                                this.getOrCreateEntry(l, i1).removePlayer(entityplayermp);
+                } // Akarin
+            } else {
+                synchronized (this) { // Akarin - synchronized
+                    for (i1 = k - oldViewDistance; i1 <= k + oldViewDistance; ++i1) {
+                        for (j1 = l - oldViewDistance; j1 <= l + oldViewDistance; ++j1) {
+                            if (!this.overlaps(i1, j1, k, l, i)) {
+                                this.getOrCreateEntry(i1, j1).removePlayer(entityplayer);
                             }
                         }
                     }
+                } // Akarin
+                if (markSort) {
+                    this.markSortPending();
                 }
             }
-
-            this.playerViewRadius = radius;
-            this.markSortPending();
         }
     }
+    // Paper end
 
     private void markSortPending()
     {
@@ -441,12 +521,12 @@
         return (long)p_187307_0_ + 2147483647L | (long)p_187307_1_ + 2147483647L << 32;
     }
 
-    public void entryChanged(PlayerChunkMapEntry entry)
+    public synchronized void entryChanged(PlayerChunkMapEntry entry) // Akarin - synchronized
     {
         this.dirtyEntries.add(entry);
     }
 
-    public void removeEntry(PlayerChunkMapEntry entry)
+    public synchronized void removeEntry(PlayerChunkMapEntry entry) // Akarin - synchronized
     {
         ChunkPos chunkpos = entry.getPos();
         long i = getIndex(chunkpos.x, chunkpos.z);
@@ -456,11 +536,73 @@
         this.dirtyEntries.remove(entry);
         this.pendingSendToPlayers.remove(entry);
         this.entriesWithoutChunks.remove(entry);
-        Chunk chunk = entry.getChunk();
+    }
 
-        if (chunk != null)
-        {
-            this.getWorldServer().getChunkProvider().queueUnload(chunk);
+    // CraftBukkit start - Sorter to load nearby chunks first
+    private static class ChunkCoordComparator implements java.util.Comparator<ChunkPos> {
+        private int x;
+        private int z;
+
+        public ChunkCoordComparator (EntityPlayer entityplayer) {
+            x = (int) entityplayer.posX >> 4;
+            z = (int) entityplayer.posZ >> 4;
         }
+
+        public int compare(ChunkPos a, ChunkPos b) {
+            if (a.equals(b)) {
+                return 0;
+            }
+
+            // Subtract current position to set center point
+            int ax = a.x - this.x;
+            int az = a.z - this.z;
+            int bx = b.x - this.x;
+            int bz = b.z - this.z;
+
+            int result = ((ax - bx) * (ax + bx)) + ((az - bz) * (az + bz));
+            if (result != 0) {
+                return result;
+            }
+
+            if (ax < 0) {
+                if (bx < 0) {
+                    return bz - az;
+                } else {
+                    return -1;
+                }
+            } else {
+                if (bx < 0) {
+                    return 1;
+                } else {
+                    return az - bz;
+                }
+            }
+        }
     }
+    // CraftBukkit end
+
+    // Paper start - Player view distance API
+    public void updateViewDistance(EntityPlayerMP player, int distanceIn) {
+        final int oldViewDistance = player.getViewDistance();
+
+        // This represents the view distance that we will set on the player
+        // It can exist as a negative value
+        int playerViewDistance = MathHelper.clamp(distanceIn, 3, 32);
+
+        // This value is the one we actually use to update the chunk map
+        // We don't ever want this to be a negative
+        int toSet = playerViewDistance;
+
+        if (distanceIn < 0) {
+            playerViewDistance = -1;
+            toSet = world.getPlayerChunkMap().getViewDistance();
+        }
+
+        if (toSet != oldViewDistance) {
+            // Order matters
+            this.setViewDistance(player, toSet);
+            player.setViewDistance(playerViewDistance);
+        }
+    }
+    // Paper end
 }
