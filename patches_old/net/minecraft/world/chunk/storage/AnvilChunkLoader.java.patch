--- ../src-base/minecraft/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
@@ -1,8 +1,6 @@
 package net.minecraft.world.chunk.storage;
 
 import com.google.common.collect.Maps;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
 import java.util.Collections;
@@ -13,10 +11,10 @@
 import net.minecraft.block.Block;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityList;
-import net.minecraft.nbt.CompressedStreamTools;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
 import net.minecraft.tileentity.TileEntity;
+import net.minecraft.util.ClassInheritanceMultiMap;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.datafix.DataFixer;
 import net.minecraft.util.datafix.FixTypes;
@@ -31,6 +29,8 @@
 import net.minecraft.world.chunk.NibbleArray;
 import net.minecraft.world.storage.IThreadedFileIO;
 import net.minecraft.world.storage.ThreadedFileIOBase;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.world.ChunkDataEvent;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -41,7 +41,7 @@
     private final Set<ChunkPos> chunksBeingSaved = Collections.<ChunkPos>newSetFromMap(Maps.newConcurrentMap());
     public final File chunkSaveLocation;
     private final DataFixer fixer;
-    private boolean flushing;
+    //private boolean flushing;
 
     public AnvilChunkLoader(File chunkSaveLocationIn, DataFixer dataFixerIn)
     {
@@ -58,13 +58,15 @@
     @Nullable
     public Chunk loadChunk(World worldIn, int x, int z) throws IOException
     {
+        worldIn.timings.syncChunkLoadDataTimer.startTiming(); // Spigot
         Object[] data = this.loadChunk__Async(worldIn, x, z);
-
+        worldIn.timings.syncChunkLoadDataTimer.stopTiming(); // Spigot
         if (data != null)
         {
             Chunk chunk = (Chunk) data[0];
             NBTTagCompound nbttagcompound = (NBTTagCompound) data[1];
             this.loadEntities(worldIn, nbttagcompound.getCompoundTag("Level"), chunk);
+            MinecraftForge.EVENT_BUS.post(new ChunkDataEvent.Load(chunk, nbttagcompound)); // Cauldron - Don't call ChunkDataEvent.Load async
             return chunk;
         }
 
@@ -79,15 +81,14 @@
 
         if (nbttagcompound == null)
         {
-            DataInputStream datainputstream = RegionFileCache.getChunkInputStream(this.chunkSaveLocation, x, z);
+            NBTTagCompound nbtTagCompound = RegionFileCache.getChunkInputStreamCB(this.chunkSaveLocation, x, z);
 
-            if (datainputstream == null)
+            if (nbtTagCompound == null)
             {
                 return null;
             }
 
-            nbttagcompound = this.fixer.process(FixTypes.CHUNK, CompressedStreamTools.read(datainputstream));
-            datainputstream.close(); // Forge: close stream after use
+            nbttagcompound = this.fixer.process(FixTypes.CHUNK, nbtTagCompound);
         }
 
         return this.checkedReadChunkFromNBT__Async(worldIn, x, z, nbttagcompound);
@@ -194,9 +195,14 @@
 
     public boolean writeNextIO()
     {
+        return this.processSaveQueueEntry(false);
+    }
+
+    private synchronized boolean processSaveQueueEntry(boolean logCompletion)
+    {
         if (this.chunksToSave.isEmpty())
         {
-            if (this.flushing)
+            if (logCompletion)
             {
                 LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", (Object)this.chunkSaveLocation.getName());
             }
@@ -238,9 +244,10 @@
 
     private void writeChunkData(ChunkPos pos, NBTTagCompound compound) throws IOException
     {
-        DataOutputStream dataoutputstream = RegionFileCache.getChunkOutputStream(this.chunkSaveLocation, pos.x, pos.z);
-        CompressedStreamTools.write(compound, dataoutputstream);
-        dataoutputstream.close();
+        // DataOutputStream dataoutputstream = RegionFileCache.getChunkOutputStream(this.chunkSaveLocation, pos.x, pos.z);
+        // CompressedStreamTools.write(compound, dataoutputstream);
+        // dataoutputstream.close();
+        RegionFileCache.getChunkOutputStream(this.chunkSaveLocation, pos.x, pos.z, compound);
     }
 
     public void saveExtraChunkData(World worldIn, Chunk chunkIn) throws IOException
@@ -255,13 +262,18 @@
     {
         try
         {
-            this.flushing = true;
+            //this.flushing = true; // CraftBukkit
 
-            while (this.writeNextIO());
+            while (true) {
+                if (this.processSaveQueueEntry(true)) { // CraftBukkit
+                    continue;
+                }
+                break; // CraftBukkit - Fix infinite loop when saving chunks
+            }
         }
         finally
         {
-            this.flushing = false;
+            //this.flushing = false; // CraftBukkit
         }
     }
 
@@ -351,22 +363,18 @@
         chunkIn.setHasEntities(false);
         NBTTagList nbttaglist1 = new NBTTagList();
 
-        for (int i = 0; i < chunkIn.getEntityLists().length; ++i)
-        {
-            for (Entity entity : chunkIn.getEntityLists()[i])
-            {
+        ClassInheritanceMultiMap<Entity>[] entityLists = chunkIn.getEntityLists();
+        for (ClassInheritanceMultiMap<Entity> entityList : entityLists) {
+            if (entityLists == null) continue;
+            for (Entity entity : entityList) {
                 NBTTagCompound nbttagcompound2 = new NBTTagCompound();
 
-                try
-                {
-                if (entity.writeToNBTOptional(nbttagcompound2))
-                {
-                    chunkIn.setHasEntities(true);
-                    nbttaglist1.appendTag(nbttagcompound2);
-                }
-                }
-                catch (Exception e)
-                {
+                try {
+                    if (entity.writeToNBTOptional(nbttagcompound2)) {
+                        chunkIn.setHasEntities(true);
+                        nbttaglist1.appendTag(nbttagcompound2);
+                    }
+                } catch (Exception e) {
                     net.minecraftforge.fml.common.FMLLog.log.error("An Entity type {} has thrown an exception trying to write state. It will not persist. Report this to the mod author",
                             entity.getClass().getName(), e);
                 }
@@ -478,6 +486,7 @@
 
     public void loadEntities(World worldIn, NBTTagCompound compound, Chunk chunk)
     {
+        worldIn.timings.syncChunkLoadEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist1 = compound.getTagList("Entities", 10);
 
         for (int j1 = 0; j1 < nbttaglist1.tagCount(); ++j1)
@@ -486,7 +495,8 @@
             readChunkEntity(nbttagcompound1, worldIn, chunk);
             chunk.setHasEntities(true);
         }
-
+        worldIn.timings.syncChunkLoadEntitiesTimer.stopTiming(); // Spigot
+        worldIn.timings.syncChunkLoadTileEntitiesTimer.startTiming(); // Spigot
         NBTTagList nbttaglist2 = compound.getTagList("TileEntities", 10);
 
         for (int k1 = 0; k1 < nbttaglist2.tagCount(); ++k1)
@@ -499,7 +509,8 @@
                 chunk.addTileEntity(tileentity);
             }
         }
-
+        worldIn.timings.syncChunkLoadTileEntitiesTimer.stopTiming(); // Spigot
+        worldIn.timings.syncChunkLoadTileTicksTimer.startTiming(); // Spigot
         if (compound.hasKey("TileTicks", 9))
         {
             NBTTagList nbttaglist3 = compound.getTagList("TileTicks", 10);
@@ -521,6 +532,7 @@
                 worldIn.scheduleBlockUpdate(new BlockPos(nbttagcompound3.getInteger("x"), nbttagcompound3.getInteger("y"), nbttagcompound3.getInteger("z")), block, nbttagcompound3.getInteger("t"), nbttagcompound3.getInteger("p"));
             }
         }
+        worldIn.timings.syncChunkLoadTileTicksTimer.stopTiming(); // Spigot
     }
 
     @Nullable
@@ -558,6 +570,11 @@
     @Nullable
     public static Entity readWorldEntityPos(NBTTagCompound compound, World worldIn, double x, double y, double z, boolean attemptSpawn)
     {
+        return spawnEntity(compound, worldIn, x, y, z, attemptSpawn, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    public static Entity spawnEntity(NBTTagCompound compound, World worldIn, double x, double y, double z, boolean attemptSpawn, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason)
+    {
         Entity entity = createEntityFromNBT(compound, worldIn);
 
         if (entity == null)
@@ -568,7 +585,7 @@
         {
             entity.setLocationAndAngles(x, y, z, entity.rotationYaw, entity.rotationPitch);
 
-            if (attemptSpawn && !worldIn.spawnEntity(entity))
+            if (attemptSpawn && !worldIn.addEntity(entity, spawnReason))
             {
                 return null;
             }
@@ -609,8 +626,11 @@
 
     public static void spawnEntity(Entity entityIn, World worldIn)
     {
-        if (worldIn.spawnEntity(entityIn) && entityIn.isBeingRidden())
-        {
+        spawnEntity(entityIn, worldIn, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
+    }
+
+    public static void spawnEntity(Entity entityIn, World worldIn, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+        if (worldIn.addEntity(entityIn, reason) && entityIn.isBeingRidden()) {
             for (Entity entity : entityIn.getPassengers())
             {
                 spawnEntity(entity, worldIn);
