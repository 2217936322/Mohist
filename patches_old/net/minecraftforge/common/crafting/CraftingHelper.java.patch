--- ../src-base/minecraft/net/minecraftforge/common/crafting/CraftingHelper.java
+++ ../src-work/minecraft/net/minecraftforge/common/crafting/CraftingHelper.java
@@ -686,56 +686,56 @@
         JsonContext ctx = new JsonContext(mod.getModId());
 
         return findFiles(mod, "assets/" + mod.getModId() + "/recipes",
-            root ->
-            {
-                Path fPath = root.resolve("_constants.json");
-                if (fPath != null && Files.exists(fPath))
+                root ->
                 {
-                    try(BufferedReader reader = Files.newBufferedReader(fPath))
+                    Path fPath = root.resolve("_constants.json");
+                    if (fPath != null && Files.exists(fPath))
                     {
-                        JsonObject[] json = JsonUtils.fromJson(GSON, reader, JsonObject[].class);
-                        ctx.loadConstants(json);
+                        try(BufferedReader reader = Files.newBufferedReader(fPath))
+                        {
+                            JsonObject[] json = JsonUtils.fromJson(GSON, reader, JsonObject[].class);
+                            ctx.loadConstants(json);
+                        }
+                        catch (JsonParseException | IOException e)
+                        {
+                            FMLLog.log.error("Error loading _constants.json: ", e);
+                            return false;
+                        }
                     }
-                    catch (JsonParseException | IOException e)
+                    return true;
+                },
+                (root, file) ->
+                {
+                    Loader.instance().setActiveModContainer(mod);
+
+                    String relative = root.relativize(file).toString();
+                    if (!"json".equals(FilenameUtils.getExtension(file.toString())) || relative.startsWith("_"))
+                        return true;
+
+                    String name = FilenameUtils.removeExtension(relative).replaceAll("\\\\", "/");
+                    ResourceLocation key = new ResourceLocation(ctx.getModId(), name);
+
+                    try(BufferedReader reader = Files.newBufferedReader(file))
                     {
-                        FMLLog.log.error("Error loading _constants.json: ", e);
+                        JsonObject json = JsonUtils.fromJson(GSON, reader, JsonObject.class);
+                        if (!processConditions(json, "conditions", ctx))
+                            return true;
+                        IRecipe recipe = CraftingHelper.getRecipe(json, ctx);
+                        ForgeRegistries.RECIPES.register(recipe.setRegistryName(key));
+                    }
+                    catch (JsonParseException e)
+                    {
+                        FMLLog.log.error("Parsing error loading recipe {}", key, e);
                         return false;
                     }
-                }
-                return true;
-            },
-            (root, file) ->
-            {
-                Loader.instance().setActiveModContainer(mod);
-
-                String relative = root.relativize(file).toString();
-                if (!"json".equals(FilenameUtils.getExtension(file.toString())) || relative.startsWith("_"))
+                    catch (IOException e)
+                    {
+                        FMLLog.log.error("Couldn't read recipe {} from {}", key, file, e);
+                        return false;
+                    }
                     return true;
-
-                String name = FilenameUtils.removeExtension(relative).replaceAll("\\\\", "/");
-                ResourceLocation key = new ResourceLocation(ctx.getModId(), name);
-
-                try(BufferedReader reader = Files.newBufferedReader(file))
-                {
-                    JsonObject json = JsonUtils.fromJson(GSON, reader, JsonObject.class);
-                    if (!processConditions(json, "conditions", ctx))
-                        return true;
-                    IRecipe recipe = CraftingHelper.getRecipe(json, ctx);
-                    ForgeRegistries.RECIPES.register(recipe.setRegistryName(key));
-                }
-                catch (JsonParseException e)
-                {
-                    FMLLog.log.error("Parsing error loading recipe {}", key, e);
-                    return false;
-                }
-                catch (IOException e)
-                {
-                    FMLLog.log.error("Couldn't read recipe {} from {}", key, file, e);
-                    return false;
-                }
-                return true;
-            },
-            true, true
+                },
+                true, true
         );
     }
 
@@ -758,7 +758,7 @@
     }
 
     public static boolean findFiles(ModContainer mod, String base, Function<Path, Boolean> preprocessor, BiFunction<Path, Path, Boolean> processor,
-            boolean defaultUnfoundRoot, boolean visitAllFiles)
+                                    boolean defaultUnfoundRoot, boolean visitAllFiles)
     {
 
         File source = mod.getSource();
@@ -804,17 +804,17 @@
             {
                 root = source.toPath().resolve(base);
             }
-    
+
             if (root == null || !Files.exists(root))
                 return defaultUnfoundRoot;
-    
+
             if (preprocessor != null)
             {
                 Boolean cont = preprocessor.apply(root);
                 if (cont == null || !cont.booleanValue())
                     return false;
             }
-        
+
             if (processor != null)
             {
                 Iterator<Path> itr = null;
@@ -827,11 +827,11 @@
                     FMLLog.log.error("Error iterating filesystem for: {}", mod.getModId(), e);
                     return false;
                 }
-    
+
                 while (itr != null && itr.hasNext())
                 {
                     Boolean cont = processor.apply(root, itr.next());
-    
+
                     if (visitAllFiles)
                     {
                         success &= cont != null && cont;
@@ -859,8 +859,8 @@
             throw new IllegalStateException("No active mod container");
         }
         return loadContext(path, mod);
-     }
-    
+    }
+
     public static JsonContext loadContext(ResourceLocation path, ModContainer mod) throws IOException
     {
         return loadContext(mod, new JsonContext(mod.getModId()), path);
@@ -898,8 +898,8 @@
         if (fPath != null && Files.exists(fPath))
         {
             return loadContext(ctx, fPath.toFile());
-        } 
-        else 
+        }
+        else
         {
             throw new FileNotFoundException(fPath != null ? fPath.toString() : path.toString());
         }
