--- ../src-base/minecraft/net/minecraftforge/fluids/BlockFluidClassic.java
+++ ../src-work/minecraft/net/minecraftforge/fluids/BlockFluidClassic.java
@@ -166,9 +166,21 @@
             }
         }
 
+        // Cauldron start
+        org.bukkit.Server server = world.getServer();
+        org.bukkit.World bworld = world.getWorld();
+        org.bukkit.block.Block source = bworld == null ? null : bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+        // Cauldron end
+
         // Flow vertically if possible
         if (canDisplace(world, pos.up(densityDir)))
         {
+            // Cauldron start
+            org.bukkit.block.BlockFace face = densityDir < 0 ? org.bukkit.block.BlockFace.DOWN : org.bukkit.block.BlockFace.UP;
+            org.bukkit.event.block.BlockFromToEvent event = new org.bukkit.event.block.BlockFromToEvent(source, face);
+            if (server != null) server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) return;
+            // Cauldron end
             flowIntoBlock(world, pos.up(densityDir), 1);
             return;
         }
@@ -187,9 +199,16 @@
                 flowMeta = 1;
             }
             boolean flowTo[] = getOptimalFlowDirections(world, pos);
+            org.bukkit.block.BlockFace[] faces = new org.bukkit.block.BlockFace[] { org.bukkit.block.BlockFace.WEST, org.bukkit.block.BlockFace.EAST,
+                    org.bukkit.block.BlockFace.NORTH, org.bukkit.block.BlockFace.SOUTH };
             for (int i = 0; i < 4; i++)
             {
-                if (flowTo[i]) flowIntoBlock(world, pos.offset(SIDES.get(i)), flowMeta);
+                if (flowTo[i]) {
+                    org.bukkit.event.block.BlockFromToEvent event = new org.bukkit.event.block.BlockFromToEvent(source, faces[i]);
+                    if (server != null) server.getPluginManager().callEvent(event);
+                    if (event.isCancelled()) continue;
+                    flowIntoBlock(world, pos.offset(SIDES.get(i)), flowMeta);
+                }
             }
         }
     }
