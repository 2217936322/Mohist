--- ../src-base/minecraft/net/minecraftforge/fml/common/FMLCommonHandler.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/FMLCommonHandler.java
@@ -58,6 +58,7 @@
 import net.minecraft.world.storage.SaveHandler;
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraftforge.client.model.animation.Animation;
+import net.minecraftforge.common.DimensionManager;
 import net.minecraftforge.common.ForgeVersion;
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.common.util.CompoundDataFixer;
@@ -69,7 +70,6 @@
 import net.minecraftforge.fml.common.gameevent.TickEvent.Phase;
 import net.minecraftforge.fml.common.network.FMLNetworkEvent;
 import net.minecraftforge.fml.common.network.NetworkRegistry;
-import net.minecraftforge.fml.common.thread.SidedThreadGroup;
 import net.minecraftforge.fml.relauncher.CoreModManager;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.server.FMLServerHandler;
@@ -85,6 +85,7 @@
 import com.google.common.collect.Maps;
 
 import javax.annotation.Nullable;
+import red.mohist.util.i18n.Message;
 
 /**
  * The main class for non-obfuscated hook handling code
@@ -198,7 +199,7 @@
 
     public Side getSide()
     {
-        return sidedDelegate.getSide();
+        return Side.SERVER;
     }
 
     /**
@@ -208,8 +209,7 @@
      */
     public Side getEffectiveSide()
     {
-        final ThreadGroup group = Thread.currentThread().getThreadGroup();
-        return group instanceof SidedThreadGroup ? ((SidedThreadGroup) group).getSide() : Side.CLIENT;
+        return Side.SERVER;
     }
     /**
      * Raise an exception
@@ -385,6 +385,10 @@
 
     public void handleWorldDataSave(SaveHandler handler, WorldInfo worldInfo, NBTTagCompound tagCompound)
     {
+        if (worldInfo.getDimension() != 0)
+        {
+            return;
+        }
         for (ModContainer mc : Loader.instance().getModList())
         {
             if (mc instanceof InjectedModContainer)
@@ -405,7 +409,7 @@
         {
             return;
         }
-        if (handlerSet.contains(handler))
+        if (handlerSet.contains(handler) || DimensionManager.getWorld(0) != null)
         {
             return;
         }
@@ -522,16 +526,7 @@
     public String getModName()
     {
         List<String> modNames = Lists.newArrayListWithExpectedSize(3);
-        modNames.add("fml");
-        if (!noForge)
-        {
-            modNames.add(ForgeVersion.MOD_ID);
-        }
-
-        if (Loader.instance().getFMLBrandingProperties().containsKey("snooperbranding"))
-        {
-            modNames.add(Loader.instance().getFMLBrandingProperties().get("snooperbranding"));
-        }
+        modNames.add("Mohist");
         return Joiner.on(',').join(modNames);
     }
 
@@ -632,8 +627,8 @@
     {
         if (!shouldAllowPlayerLogins())
         {
-            TextComponentString text = new TextComponentString("Server is still starting! Please wait before reconnecting.");
-            FMLLog.log.info("Disconnecting Player: {}", text.getUnformattedText());
+            TextComponentString text = new TextComponentString(Message.getString("forge.fmlcommonhandler.hsh.1"));
+            FMLLog.log.info(Message.getFormatString("forge.fmlcommonhandler.hsh.2", new Object[]{text.getUnformattedText()}));
             manager.sendPacket(new SPacketDisconnect(text));
             manager.closeChannel(text);
             return false;
@@ -642,9 +637,9 @@
         if (packet.getRequestedState() == EnumConnectionState.LOGIN && (!NetworkRegistry.INSTANCE.isVanillaAccepted(Side.CLIENT) && !packet.hasFMLMarker()))
         {
             manager.setConnectionState(EnumConnectionState.LOGIN);
-            TextComponentString text = new TextComponentString("This server has mods that require FML/Forge to be installed on the client. Contact your server admin for more details.");
+            TextComponentString text = new TextComponentString(Message.getString("forge.fmlcommonhandler.hsh.3"));
             Collection<String> modNames = NetworkRegistry.INSTANCE.getRequiredMods(Side.CLIENT);
-            FMLLog.log.info("Disconnecting Player: This server has mods that require FML/Forge to be installed on the client: {}", modNames);
+            FMLLog.log.info(Message.getFormatString("forge.fmlcommonhandler.hsh.4", new Object[]{modNames}));
             manager.sendPacket(new SPacketDisconnect(text));
             manager.closeChannel(text);
             return false;
